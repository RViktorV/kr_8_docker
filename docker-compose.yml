version: "3"  # Версия Docker Compose

services:
  redis:
    image: redis  # Используем официальный образ Redis
    restart: on-failure  # Перезапуск контейнера при сбоях
    expose:
      - 6379  # Открываем порт 6379 для внутреннего взаимодействия между сервисами
    env_file:
      - ".env"  # Используем файл .env для установки переменных окружения

  db:
    image: postgres  # Используем официальный образ PostgreSQL
    restart: on-failure  # Перезапуск контейнера при сбоях
    expose:
      - 5432  # Открываем порт 5432 для внутреннего взаимодействия между сервисами
    volumes:
      - pg_data:/var/lib/postgresql/data/  # Монтируем том для сохранения данных базы данных
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]  # Проверка состояния базы данных с помощью pg_isready
      interval: 10s  # Интервал между проверками состояния
      retries: 5  # Количество попыток при неудачной проверке
      start_period: 30s  # Период ожидания перед первой проверкой
      timeout: 10s  # Максимальное время ожидания ответа
    env_file:
      - ".env"  # Используем файл .env для установки переменных окружения

  app:
    build: .  # Строим образ приложения из текущей директории
    tty: true  # Включаем поддержку TTY (необходим для Celery)
    command: python manage.py runserver 0.0.0.0:8000  # Команда для запуска Django-сервера
    volumes:
      - .:/app  # Монтируем локальные файлы проекта в контейнер
    ports:
      - "8000:8000"  # Пробрасываем порт 8000 для доступа к приложению
    env_file:
      - ".env"  # Используем файл .env для установки переменных окружения
    depends_on:
      db:
        condition: service_healthy  # Запускаем приложение только после проверки, что база данных готова
        restart: true  # Перезапуск при сбоях

  celery:
    build: .  # Строим образ для Celery из текущей директории
    tty: true  # Включаем поддержку TTY (необходим для корректной работы Celery)
    command: celery -A config worker -B -l INFO  # Запускаем Celery worker с включенным расписанием задач
    restart: on-failure  # Перезапуск контейнера при сбоях
    volumes:
      - .:/app  # Монтируем локальные файлы проекта в контейнер
    depends_on:
      - redis  # Celery зависит от Redis
      - db     # Celery зависит от базы данных
      - app    # Celery зависит от веб-приложения
    env_file:
      - ".env"  # Используем файл .env для установки переменных окружения

volumes:
  pg_data:  # Определяем том для хранения данных базы данных
